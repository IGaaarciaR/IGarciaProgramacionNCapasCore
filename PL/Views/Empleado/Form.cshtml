@model ML.Empleado
@{
    ViewData["Title"] = "Form";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container">

    <div class="row">

        <div class="col-md-12">

            <h2>Empleado</h2>

        </div>

    </div>

    <div class="row">

        <div class="col-md-12">

            <hr />

        </div>

    </div>

    <div class="row">

        @using (Html.BeginForm("Form", "Empleado", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.TextBoxFor(model => model.Action, new { @class = "d-none form-control" })

            if(Model.NumeroEmpleado == null){
                <div class="form-group">

                    <div class="col-md-3">

                        @Html.LabelFor(model => model.NumeroEmpleado)

                        @Html.TextBoxFor(model => model.NumeroEmpleado, new { @class = " form-control" })

                        @Html.ValidationMessageFor(model => model.NumeroEmpleado)

                    </div>

                </div>
            }
            else{
                 <div class="form-group">

                    <div class="col-md-3">

                        @Html.LabelFor(model => model.NumeroEmpleado,  new { @class = " d-none form-control"})

                        @Html.TextBoxFor(model => model.NumeroEmpleado, new { @class = " d-none form-control"})

                        @Html.ValidationMessageFor(model => model.NumeroEmpleado)

                    </div>

                </div>
            }
            

            <div class="row">

                <div class="col-md-3">

                    @Html.LabelFor(model => model.RFC)
                    <div class="input-group mb-3">
                        <span class="input-group-text"><i class="bi bi-person-fill"></i></span>

                        @Html.TextBoxFor(model => model.RFC, new { @class = "form-control"  })

                        @Html.ValidationMessageFor(model => model.RFC)

                        @*@Html.Label("", null, new {@id = "lblUserName"})*@
                    </div>

                </div>

                <div class="col-md-3">

                    @Html.LabelFor(model => model.Nombre)
                    <div class="input-group mb-3">
                        <span class="input-group-text"><i class="bi bi-person-lines-fill"></i></span>


                        @Html.TextBoxFor(model => model.Nombre, new { @class = "form-control", @onkeydown ="SoloLetras(event, 'lblNombre')" })

                        @Html.ValidationMessageFor(model => model.Nombre)

                    </div>
                    @Html.Label("", null, new {@id = "lblNombre"})
                </div>

                <div class="col-md-3">

                    @Html.LabelFor(model => model.ApellidoPaterno)
                    <div class="input-group mb-3">
                        <span class="input-group-text"><i class="bi bi-person-lines-fill"></i></span>


                        @Html.TextBoxFor(model => model.ApellidoPaterno, new { @class = "form-control" , @onkeypress ="SoloLetras(event, 'lblApellidoPaterno')" })

                        @Html.ValidationMessageFor(model => model.ApellidoPaterno)

                    </div>

                    @Html.Label("", null, new {@id = "lblApellidoPaterno"})
                </div>

                <div class="col-md-3">

                    @Html.LabelFor(model => model.ApellidoMaterno)
                    <div class="input-group mb-3">
                        <span class="input-group-text"><i class="bi bi-person-lines-fill"></i></span>


                        @Html.TextBoxFor(model => model.ApellidoMaterno, new { @class = "form-control" , @onkeypress ="SoloLetras(event, 'lblApellidoMaterno')" })

                        @Html.ValidationMessageFor(model => model.ApellidoMaterno)
                    </div>

                    @Html.Label("", null, new {@id = "lblApellidoMaterno"})
                </div>

            </div>

            <div class="row">

                <div class="col-md-3">

                    @Html.LabelFor(model => model.Email)
                    <div class="input-group mb-3">
                        <span class="input-group-text"><i class="bi bi-envelope"></i></span>


                        @Html.TextBoxFor(model => model.Email, new { @class = "form-control", @onkeypress ="Email(event, 'lblEmail')" })

                        @Html.ValidationMessageFor(model => model.Email)
                    </div>
                    @Html.Label("", null, new {@id = "lblEmail"})
                </div>

                <div class="col-md-3">

                    @Html.LabelFor(model => model.Telefono)
                    <div class="input-group mb-3">
                        <span class="input-group-text"><i class="bi bi-lock"></i></span>

                        @Html.TextBoxFor(model => model.Telefono, new { @class = "form-control", @onkeypress ="SoloNumeros(event, 'lblPassword')"  })

                        @Html.ValidationMessageFor(model => model.Telefono)
                    </div>
                    @Html.Label("", null, new {@id = "lblPassword"})
                </div>

                <div class="col-md-3">

                    @Html.LabelFor(model => model.FechaNacimiento)
                    <div class="input-group mb-3">
                        <span class="input-group-text"><i class="bi bi-calendar-date"></i></span>

                        @Html.TextBoxFor(model => model.FechaNacimiento, new { @class = "form-control" , @id = "FechaNac"})

                        @Html.ValidationMessageFor(model => model.FechaNacimiento)
                    </div>
                </div>

                <div class="col-md-3">
                    @Html.LabelFor(model => model.NSS)
                   
                    @Html.TextBoxFor(model => model.NSS, new { @class = "form-control" })
                
                    @Html.ValidationMessageFor(model => model.NSS)

                </div>

            </div>
            <div class="row">

                <div class="col-md-3">

                    @Html.LabelFor(model => model.FechaIngreso)
                    <div class="input-group mb-3">
                        <span class="input-group-text"><i class="bi bi-calendar-date"></i></span>

                        @Html.TextBoxFor(model => model.FechaIngreso, new { @class = "form-control" , @id = "FechaIng"})

                        @Html.ValidationMessageFor(model => model.FechaIngreso)
                    </div>
                </div>

                <div class="col-md-3">

                    @Html.LabelFor(model=> model.Foto)

                    <div class="input-group mb-3">
                        <span class="input-group-text" id="basic-addon1"><i class="bi bi-card-image"></i></span>
                        <input id="IFImage" type='file' class="form-control" name="IFImage" onchange="validateFile(this), readURL(this);  " />
                    </div>

                    @if (Model.Foto != null)
                    {

                        <img id="ImagenPreview" src="data:image/*;base64,@Model.Foto" style="width:250px ; height:250px" />

                    }
                    else
                    {
                        <img id="ImagenPreview" src="~/Imagenes/userdefault.png" style="width:250px ; height:250px" />
                    }

                </div>

                <div class="col-md-3">

                    @Html.LabelFor(model => model.Empresa)
                    <div class="input-group mb-3">
                        <span class="input-group-text"><i class="bi bi-list-ol"></i></span>

                        @*@Html.TextBoxFor(model => model.Semestre.IdSemestre, new { @class = "form-control" })*@
                        @Html.DropDownListFor(model => model.Empresa.IdEmpresa, new SelectList(Model.Empresa.Empresas, "IdEmpresa", "Nombre"), "Selecciona una Empresa", new { @class = "form-control" })

                        @Html.ValidationMessageFor(model => model.Empresa.IdEmpresa)
                    </div>
                </div>

            </div>


            <div class="row">

                <div class="col-md-3">

                    <input type="submit" value="Guardar" class="btn btn-success" />

                    @Html.ActionLink("Regresar", "GetAll", "Usuario", htmlAttributes: new { @class = "btn btn-danger" })

                </div>

            </div>

        }

    </div>

</div>

@section Scripts
    {

    <script src="~/lib/jquery/dist/jquery.js"></script>
    <link rel="stylesheet" href="//code.jquery.com/ui/1.13.1/themes/base/jquery-ui.css">
    <link rel="stylesheet" href="/resources/demos/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.js"></script>
    <script src="https://code.jquery.com/ui/1.13.1/jquery-ui.js"></script>
    <script src="https://www.w3schools.com/lib/w3.js"></script>

    <script src="http://code.jquery.com/jquery-1.9.1.js"></script>
    <script src="http://code.jquery.com/ui/1.10.1/jquery-ui.js"></script>


    <script>
        $(function () {
            $("#FechaNac").datepicker({ minDate: -130, maxDate: "+0D",  dateFormat: 'dd-mm-yy' });
        });
    </script>

    <script>
        $(function () {
            $("#FechaIng").datepicker({ minDate: -130, maxDate: "+1D", dateFormat: 'dd-mm-yy' });
        });
    </script>

    <script type="text/javascript">

        function validateFile() {
            var allowedExtension = ['png', 'jpg'];
            var fileExtension = document.getElementById('IFImage').value.split('.').pop().toLowerCase();
            var isValidFile = false;
            for (var index in allowedExtension) {
                if (fileExtension === allowedExtension[index]) {
                    isValidFile = true;
                    break;
                }
            }
            if (!isValidFile) {
                alert('Las extensiones permitidas son : *.' + allowedExtension.join(', *.'));
                document.getElementById('IFImage').value = ""
            }
            return isValidFile;
        }

        function readURL(input) {

            if (input.files && input.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    $('#ImagenPreview').attr('src', e.target.result);
                };

                reader.readAsDataURL(input.files[0]);
            }
        }
    </script>

    <script type="text/javascript">

        function SoloLetras(e, controlId) {
            var caracter = e.key;
            if (!/^[a-zA-Z\s]*$/.test(caracter)) {
                //e.value = ""
                $('#' + controlId).text("Solo se aceptan letras");
                $('#' + controlId).css({ "color": "red" });
                //document.getElementById(controlId) = "";
                return false;
            }
            else {
                $('#' + controlId).text("");
                return true;
            }
        }

        function SoloNumeros(e, controlId) {
            var caracter = e.key;
            if (!/^[0-9]+$/.test(caracter)) {
                $('#' + controlId).text("Solo se aceptan números");
                $('#' + controlId).css({ "color": "red" });
                return false;
            }
            else {
                $('#' + controlId).text("");
                return true;
            }
        }

        function LetrasYNumeros(e, controlId) {
            var caracter = e.key;
            if (!/^[A-Za-z0-9\s]+$/.test(caracter)) {
                $('#' + controlId).text("Solo se aceptan letras y/o números");
                $('#' + controlId).css({ "color": "red" });
                return false;
            }
            else {
                $('#' + controlId).text("");
                return true;
            }
        }

        function CURP(e, controlId) {
            var caracter = e.key;
            if (!/^[A-Z]{1}[AEIOU]{1}[A-Z]{2}[0-9]{2} + (0[1-9]|1[0-2])(0[1-9]|1[0-9]|2[0-9]|3[0-1]) + [HM]{1} + (AS|BC|BS|CC|CS|CH|CL|CM|DF|DG|GT|GR|HG|JC|MC|MN|MS|NT|NL|OC|PL|QT|QR|SP|SL|SR|TC|TS|TL|VZ|YN|ZS|NE) + [B-DF-HJ-NP-TV-Z]{3} + [0-9A-Z]{1}[0-9]{1}$/.test(caracter)) {
                $('#' + controlId).text("Solo se aceptan letras y/o números");
                $('#' + controlId).css({ "color": "red" });
                return false;
            }
            else {
                $('#' + controlId).text("");
                return true;
            }
        }
        function Password(e, controlId) {
            var caracter = e.key;
            if (!/^(?=.*\d)(?=.*[\u0021-\u002b\u003c-\u0040])(?=.*[A-Z])(?=.*[a-z])\S{8,16}$/.test(caracter)) {
                $('#' + controlId).text("La contraseña debe tener al entre 8 y 16 caracteres con: al menos un dígito, al menos una minúscula, al menos una mayúscula y al menos un caracter no alfanumérico");
                $('#' + controlId).css({ "color": "red" });
                return false;
            }
            else {
                $('#' + controlId).text("");
                return true;
            }
        }

        function Email(e, controlId) {
            var caracter = e.key;
            if (!/-/.test(caracter)) {
                $('#' + controlId).text("Solo se aceptan letras y/o números");
                $('#' + controlId).css({ "color": "red" });
                return false;
            }
            else {
                $('#' + controlId).text("");
                return true;
            }
        }

    </script>

    }




